import Head from 'next/head'
import Image from 'next/image'
import NavBar from '@/components/NavBar'
import Footer from '@/components/Footer'
import styles from '@/styles/chat.module.scss'
import { useEffect, useRef, useState } from 'react'
import Link from 'next/link'
import { useSession } from 'next-auth/react'
import axios from 'axios';
import { GetServerSideProps } from 'next';

type Props = {
  uuid: string;
};

const DynamicPage = ({ uuid }: Props) => {
  return <div>UUID: {uuid}</div>;
};

export const getServerSideProps: GetServerSideProps<Props> = async (ctx) => {
  const { uuid } = ctx.params;

  // UUID 값에 대한 추가 로직 수행

  return {
    props: {
      uuid,
    },
  };
};


export default function chat({uuid}) {
  // nextauth 로그인
 const [isLogin,setIsLogin] = useState(false)
 let session  = useSession();
 // 로그인하면 채팅 데이터 로딩
 const [chatData, setChatData]:[{
    _id: string,
    uuid: string,
    name: string,
    host: string,
    guest: string,
    timestamp: string,
    time: string,
    partner: string,
    photo: string,
    message: string,
  },Function] = useState({
    _id: '',
    uuid: '',
    name: '',
    host: '',
    guest: '',
    timestamp: '',
    time: '',
    partner: '',
    photo: '',
    message: '',
  })

  // 내 채팅 데이터 가져오기
  const fetchChatroomData = async () => {
    try {
      const res = await axios.get(`/api/chatroom/get/${uuid}`);
      return res.data
    } catch (err) {
      console.log(err);
    }
  };
  // 내 채팅들 가져오기
  const fetchChatsData = async () => {
    try {
      const res = await axios.get(`/api/chats/get/${uuid}`);
      return res.data
    } catch (err) {
      console.log(err);
    }
  };

  // 최초 마운트시, 로그인 상태면 채팅 데이터를 불러옴
 useEffect(()=>{
  if (session.status === 'authenticated') {
    setIsLogin(true);
    // const myEmail = session.data.user?.email as string;
    (async function(){
      const chatroomData = await fetchChatroomData() as any;
      const chatsData = await fetchChatsData() as any;
      console.log(chatroomData)
      console.log(chatsData)
      setChatData(chatroomData)
    })()
   } else if(session.status === 'loading') {
    return
   } else {
    alert('잘못된 접근입니다.')
    window.location.href = '/'
   }
 },[session])

  return (
    <>
      <Head>
        <title>Gloomy Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar isLogin={isLogin} />
      <div className="wrap">
        <header className="img-box header mb-100 hp-300">
          <div className="img-box--words">
            <h1>Gloomy Chat</h1>
            <p>Video Call &amp; Text Chat</p>
          </div>
        </header>

       <section
          className="section fadeInUp active blink"
        >
          {
          chatData ? 
          <>
            <h2 className="title-02" id="intro">{chatData.name}</h2>
            <div className={`ly-flex-wrap mt-50 ${styles['chat-box__wrap']}`}>
              <article className={`${styles['chat-box']}`}>
                <Link href={`/chat/${chatData.uuid}`} className={`${styles['chat-box__division']}`}>
                  <div>
                    <img src={chatData.photo} alt="profile" width={60} height={60} />
                  </div>
                  <div>
                    <div className="ly-flex-wrap justify-between align-center">
                      <h3>{chatData.name}</h3>
                      <p>{chatData.time}</p>
                    </div>
                    <div className="ly-flex-wrap justify-between align-center mt-10">
                      <h4>대화상대: {chatData.partner}</h4>
                      <p>마지막 메세지: {chatData.message}</p>
                    </div>
                  </div>
                </Link>
              </article>
            </div>
           </>
          :
          <>
          채팅 기록이 없습니다.
          </>
           }
        </section>

      

      </div>
      <Footer />
    </>
  )
}
